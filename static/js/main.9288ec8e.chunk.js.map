{"version":3,"sources":["components/Team/TeamList/index.js","components/Team/TeamMember/TeamMember.jsx","constants/colors.js","components/Team/TeamList/TeamList.jsx","components/Team/Team.jsx","components/Insights/Insights.jsx","components/Scoring/Scoring.jsx","components/Azure/Azure.jsx","components/Layout/index.js","components/Layout/Layout.jsx","App.js","serviceWorker.js","index.js","assets/team_pics/maksim_bw.jpg","assets/team_pics/irina_bw.jpg","assets/team_pics/sergei_bw.jpeg","assets/team_pics/kirill_bw.jpg"],"names":["roles","ds","dev","pitch","presentation","management","members","id","img","maxImg","name","gihub","description","irinaImg","sergeiImg","kirillImg","TeamMember","className","src","alt","dashed","orientation","style","borderColor","margin","lineHeight","map","role","color","fontSize","rolesDict","TeamList","member","Team","Insights","Scoring","Azure","tabs","label","tabContent","team","insights","scoring","azure","TabPane","Tabs","Layout","defaultActiveKey","useState","activeTab","setActiveTab","onChange","activeKey","tabPosition","tab","key","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.9288ec8e.chunk.js","sourcesContent":["import maxImg from \"assets/team_pics/maksim_bw.jpg\";\nimport irinaImg from \"assets/team_pics/irina_bw.jpg\";\nimport sergeiImg from \"assets/team_pics/sergei_bw.jpeg\";\nimport kirillImg from \"assets/team_pics/kirill_bw.jpg\";\n\nexport const roles = {\n  ds: \"Data Science\",\n  dev: \"Разработка\",\n  pitch: \"Питч\",\n  presentation: \"Презентация\",\n  management: \"Управление командой\",\n};\n\nexport const members = [\n  {\n    id: \"maks\",\n    img: maxImg,\n    name: \"Максим Шевченко\",\n    roles: [\"ds\", \"pitch\", \"presentation\"],\n    gihub: \"\",\n    description: \"\",\n  },\n  {\n    id: \"irina\",\n    img: irinaImg,\n    name: \"Ирина Елисова\",\n    roles: [\"ds\", \"presentation\", \"management\"],\n    gihub: \"\",\n    description: \"\",\n  },\n  {\n    id: \"sergei\",\n    img: sergeiImg,\n    name: \"Сергей Курочкин\",\n    roles: [\"dev\"],\n    gihub: \"\",\n    description: \"\",\n  },\n  {\n    id: \"sergei\",\n    img: kirillImg,\n    name: \"Кирилл Ликсаков\",\n    roles: [\"ds\"],\n    gihub: \"\",\n    description: \"\",\n  },\n];\n","import React from \"react\";\nimport { roles as rolesDict } from \"../TeamList/index\";\nimport { Tag, Divider } from \"antd\";\n\nimport \"./TeamMember.scss\";\nimport { white, elPurple, elYellow } from \"constants/colors\";\n\nconst TeamMember = ({ id, name, img, roles, description }) => {\n  return (\n    <div className=\"team-member\">\n      <div className=\"img-wrapper\">\n        <img src={img} alt={name} />\n      </div>\n      <div className=\"content\">\n        <div className=\"name\">{name}</div>\n        <Divider\n          dashed\n          orientation=\"left\"\n          style={{ borderColor: elYellow, margin: \"8px 0\" }}\n        />\n\n        <div style={{ lineHeight: \"28px\" }}>\n          {roles.map((role) => (\n            <Tag color={white} style={{ fontSize: 16, color: elPurple }}>\n              {rolesDict[role]}\n            </Tag>\n          ))}\n        </div>\n        <div className=\"description\">{description}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeamMember;\n","export const white = \"#ffffff\";\n\nexport const elPurple = \"#2d2784\";\nexport const elYellow = \"#f6dd00\";\nexport const elBrown = \"#6b2929\";\nexport const elBlue = \"#63b8f9\";\nexport const elRed = \"#d83a01\";\n","import React from \"react\";\nimport { members } from \"./index\";\nimport TeamMember from \"../TeamMember/TeamMember\";\n\nimport \"./TeamList.scss\";\n\nconst TeamList = () => {\n  return (\n    <div className=\"team-list\">\n      {members.map((member) => (\n        <TeamMember {...member} />\n      ))}\n    </div>\n  );\n};\n\nexport default TeamList;\n","import React from \"react\";\nimport TeamList from \"./TeamList/TeamList\";\n\nconst Team = () => {\n  return (\n    <>\n      <div className=\"content-header\">Наша команда</div>\n      <TeamList />\n    </>\n  );\n};\n\nexport default Team;\n","import React from \"react\";\n\nconst Insights = () => {\n  return <div className=\"content-header\">Инсайты</div>;\n};\n\nexport default Insights;\n","import React from \"react\";\n\nconst Scoring = () => {\n  return <div className=\"content-header\">Скоринг</div>;\n};\n\nexport default Scoring;\n","import React from \"react\";\n\nconst Azure = () => {\n  return <div className=\"content-header\">Эксперименты в Azure</div>;\n};\n\nexport default Azure;\n","import React from \"react\";\nimport Team from \"components/Team/Team\";\nimport Insigths from \"components/Insights/Insights\";\nimport Scoring from \"components/Scoring/Scoring\";\nimport Azure from \"components/Azure/Azure\";\n\nexport const tabs = [\n  {\n    id: \"team\",\n    label: \"Команда\",\n  },\n  {\n    id: \"insights\",\n    label: \"Инсайты\",\n  },\n  {\n    id: \"scoring\",\n    label: \"Скоринг\",\n  },\n  {\n    id: \"azure\",\n    label: \"Azure ML\",\n  },\n];\n\nexport const tabContent = {\n  team: <Team />,\n  insights: <Insigths />,\n  scoring: <Scoring />,\n  azure: <Azure />,\n};\n","import React, { useState } from \"react\";\nimport { tabs, tabContent } from \"./index\";\nimport { elPurple, white } from \"constants/colors\";\n\nimport \"./Layout.scss\";\nimport { Tabs } from \"antd\";\nconst { TabPane } = Tabs;\n\nconst Layout = () => {\n  // const tab = parseUrl\n  const defaultActiveKey = tabs[0].id;\n  const [activeTab, setActiveTab] = useState(defaultActiveKey);\n\n  return (\n    <div className=\"layout\">\n      <div className=\"tabbar\">\n        <Tabs\n          defaultActiveKey={defaultActiveKey}\n          onChange={(activeKey) => setActiveTab(activeKey)}\n          tabPosition=\"right\"\n        >\n          {tabs.map((tab) => (\n            <TabPane tab={tab.label} key={tab.id} />\n          ))}\n        </Tabs>\n      </div>\n      <div\n        className=\"tab-content\"\n        style={{\n          backgroundColor: activeTab === \"team\" ? elPurple : white,\n        }}\n      >\n        {tabContent[activeTab]}\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"./components/Layout/Layout\";\n\nimport \"./App.less\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/maksim_bw.bf0d1fc4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/irina_bw.589b6a07.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sergei_bw.1a1c16a9.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/kirill_bw.b991285e.jpg\";"],"sourceRoot":""}